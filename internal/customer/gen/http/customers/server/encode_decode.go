// Code generated by goa v3.5.3, DO NOT EDIT.
//
// customers HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/jolinGalal/jumia/internal/customer/design

package server

import (
	"context"
	"net/http"
	"strconv"

	customers "github.com/jolinGalal/jumia/internal/customer/gen/customers"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListResponse returns an encoder for responses returned by the
// customers list endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*customers.ListResult)
		enc := encoder(ctx, w)
		body := NewListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListRequest returns a decoder for requests sent to the customers list
// endpoint.
func DecodeListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			country       string
			state         string
			sortDirection string
			sortKey       string
			pageNumber    int
			pageSize      int
			err           error
		)
		countryRaw := r.URL.Query().Get("country")
		if countryRaw != "" {
			country = countryRaw
		} else {
			country = "all"
		}
		if !(country == "all" || country == "Cameroon" || country == "Ethiopia" || country == "Morocco" || country == "Mozambique" || country == "Uganda") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("country", country, []interface{}{"all", "Cameroon", "Ethiopia", "Morocco", "Mozambique", "Uganda"}))
		}
		stateRaw := r.URL.Query().Get("state")
		if stateRaw != "" {
			state = stateRaw
		} else {
			state = "all"
		}
		if !(state == "all" || state == "Valid" || state == "Not Valid") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("state", state, []interface{}{"all", "Valid", "Not Valid"}))
		}
		sortDirectionRaw := r.URL.Query().Get("sort_direction")
		if sortDirectionRaw != "" {
			sortDirection = sortDirectionRaw
		} else {
			sortDirection = "desc"
		}
		if !(sortDirection == "asc" || sortDirection == "desc") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("sortDirection", sortDirection, []interface{}{"asc", "desc"}))
		}
		sortKeyRaw := r.URL.Query().Get("sort_key")
		if sortKeyRaw != "" {
			sortKey = sortKeyRaw
		} else {
			sortKey = "CustomerID"
		}
		if !(sortKey == "CustomerID" || sortKey == "CustomerName" || sortKey == "CustomerPhone") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("sortKey", sortKey, []interface{}{"CustomerID", "CustomerName", "CustomerPhone"}))
		}
		{
			pageNumberRaw := r.URL.Query().Get("page_number")
			if pageNumberRaw == "" {
				pageNumber = 1
			} else {
				v, err2 := strconv.ParseInt(pageNumberRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("pageNumber", pageNumberRaw, "integer"))
				}
				pageNumber = int(v)
			}
		}
		if pageNumber < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("pageNumber", pageNumber, 1, true))
		}
		{
			pageSizeRaw := r.URL.Query().Get("page_size")
			if pageSizeRaw == "" {
				pageSize = 20
			} else {
				v, err2 := strconv.ParseInt(pageSizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("pageSize", pageSizeRaw, "integer"))
				}
				pageSize = int(v)
			}
		}
		if pageSize < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("pageSize", pageSize, 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewListPayload(country, state, sortDirection, sortKey, pageNumber, pageSize)

		return payload, nil
	}
}

// marshalCustomersListCustomerRespToListCustomerRespResponseBody builds a
// value of type *ListCustomerRespResponseBody from a value of type
// *customers.ListCustomerResp.
func marshalCustomersListCustomerRespToListCustomerRespResponseBody(v *customers.ListCustomerResp) *ListCustomerRespResponseBody {
	res := &ListCustomerRespResponseBody{
		ID:          v.ID,
		Name:        v.Name,
		Phone:       v.Phone,
		Country:     v.Country,
		State:       v.State,
		CountryCode: v.CountryCode,
	}

	return res
}

// marshalCustomersPaginationToPaginationResponseBody builds a value of type
// *PaginationResponseBody from a value of type *customers.Pagination.
func marshalCustomersPaginationToPaginationResponseBody(v *customers.Pagination) *PaginationResponseBody {
	res := &PaginationResponseBody{
		CurrentPage: v.CurrentPage,
		PageSize:    v.PageSize,
		TotalPages:  v.TotalPages,
		TotalCount:  v.TotalCount,
	}

	return res
}
