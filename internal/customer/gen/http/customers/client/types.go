// Code generated by goa v3.5.3, DO NOT EDIT.
//
// customers HTTP client types
//
// Command:
// $ goa gen github.com/jolinGalal/jumia/internal/customer/design

package client

import (
	customers "github.com/jolinGalal/jumia/internal/customer/gen/customers"
	goa "goa.design/goa/v3/pkg"
)

// ListResponseBody is the type of the "customers" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	// events
	Customers []*ListCustomerRespResponseBody `form:"customers,omitempty" json:"customers,omitempty" xml:"customers,omitempty"`
	// pagination
	Pagination *PaginationResponseBody `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// ListCustomerRespResponseBody is used to define fields on response body types.
type ListCustomerRespResponseBody struct {
	// customer ID
	ID *int `form:"ID,omitempty" json:"ID,omitempty" xml:"ID,omitempty"`
	// customer name
	Name *string `form:"Name,omitempty" json:"Name,omitempty" xml:"Name,omitempty"`
	// customer phone
	Phone *string `form:"Phone,omitempty" json:"Phone,omitempty" xml:"Phone,omitempty"`
	// customer country
	Country *string `form:"Country,omitempty" json:"Country,omitempty" xml:"Country,omitempty"`
	// phone state
	State *string `form:"State,omitempty" json:"State,omitempty" xml:"State,omitempty"`
	// country code
	CountryCode *string `form:"CountryCode,omitempty" json:"CountryCode,omitempty" xml:"CountryCode,omitempty"`
}

// PaginationResponseBody is used to define fields on response body types.
type PaginationResponseBody struct {
	// The current page
	CurrentPage *int `form:"current_page,omitempty" json:"current_page,omitempty" xml:"current_page,omitempty"`
	// Max number of records per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty" xml:"page_size,omitempty"`
	// Total pages
	TotalPages *int `form:"total_pages,omitempty" json:"total_pages,omitempty" xml:"total_pages,omitempty"`
	// Total records count
	TotalCount *int64 `form:"total_count,omitempty" json:"total_count,omitempty" xml:"total_count,omitempty"`
}

// NewListResultOK builds a "customers" service "list" endpoint result from a
// HTTP "OK" response.
func NewListResultOK(body *ListResponseBody) *customers.ListResult {
	v := &customers.ListResult{}
	v.Customers = make([]*customers.ListCustomerResp, len(body.Customers))
	for i, val := range body.Customers {
		v.Customers[i] = unmarshalListCustomerRespResponseBodyToCustomersListCustomerResp(val)
	}
	v.Pagination = unmarshalPaginationResponseBodyToCustomersPagination(body.Pagination)

	return v
}

// ValidateListResponseBody runs the validations defined on ListResponseBody
func ValidateListResponseBody(body *ListResponseBody) (err error) {
	if body.Customers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customers", "body"))
	}
	if body.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
	}
	for _, e := range body.Customers {
		if e != nil {
			if err2 := ValidateListCustomerRespResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateListCustomerRespResponseBody runs the validations defined on
// ListCustomerRespResponseBody
func ValidateListCustomerRespResponseBody(body *ListCustomerRespResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ID", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Name", "body"))
	}
	if body.Phone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Phone", "body"))
	}
	if body.Country == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Country", "body"))
	}
	if body.State == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("State", "body"))
	}
	if body.CountryCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("CountryCode", "body"))
	}
	return
}
