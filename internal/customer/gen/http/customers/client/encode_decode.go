// Code generated by goa v3.5.3, DO NOT EDIT.
//
// customers HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/jolinGalal/jumia/internal/customer/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	customers "github.com/jolinGalal/jumia/internal/customer/gen/customers"
	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "customers" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListCustomersPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("customers", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the customers list
// server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*customers.ListPayload)
		if !ok {
			return goahttp.ErrInvalidType("customers", "list", "*customers.ListPayload", v)
		}
		values := req.URL.Query()
		values.Add("country", p.Country)
		values.Add("state", p.State)
		values.Add("sort_direction", p.SortDirection)
		values.Add("sort_key", p.SortKey)
		values.Add("page_number", fmt.Sprintf("%v", p.PageNumber))
		values.Add("page_size", fmt.Sprintf("%v", p.PageSize))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the customers
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("customers", "list", err)
			}
			err = ValidateListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("customers", "list", err)
			}
			res := NewListResultOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("customers", "list", resp.StatusCode, string(body))
		}
	}
}

// unmarshalListCustomerRespResponseBodyToCustomersListCustomerResp builds a
// value of type *customers.ListCustomerResp from a value of type
// *ListCustomerRespResponseBody.
func unmarshalListCustomerRespResponseBodyToCustomersListCustomerResp(v *ListCustomerRespResponseBody) *customers.ListCustomerResp {
	res := &customers.ListCustomerResp{
		ID:          *v.ID,
		Name:        *v.Name,
		Phone:       *v.Phone,
		Country:     *v.Country,
		State:       *v.State,
		CountryCode: *v.CountryCode,
	}

	return res
}

// unmarshalPaginationResponseBodyToCustomersPagination builds a value of type
// *customers.Pagination from a value of type *PaginationResponseBody.
func unmarshalPaginationResponseBodyToCustomersPagination(v *PaginationResponseBody) *customers.Pagination {
	res := &customers.Pagination{
		CurrentPage: v.CurrentPage,
		PageSize:    v.PageSize,
		TotalPages:  v.TotalPages,
		TotalCount:  v.TotalCount,
	}

	return res
}
